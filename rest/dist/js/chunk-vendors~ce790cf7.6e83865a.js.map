{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/index.js","webpack:///./node_modules/highlight.js/lib/highlight.js"],"names":["hljs","__webpack_require__","registerLanguage","module","exports","factory","window","self","ArrayProto","objectKeys","Object","keys","languages","aliases","noHighlightRe","languagePrefixRe","fixMarkupRe","spanEndTag","options","classPrefix","tabReplace","useBR","undefined","escape","value","replace","tag","node","nodeName","toLowerCase","testRe","re","lexeme","match","exec","index","isNotHighlighted","language","test","blockLanguage","block","i","length","_class","classes","className","parentNode","getLanguage","split","inherit","parent","key","result","objects","Array","prototype","slice","call","arguments","forEach","obj","nodeStream","_nodeStream","offset","child","firstChild","nextSibling","nodeType","nodeValue","push","event","mergeStreams","original","highlighted","processed","nodeStack","selectStream","open","attr_str","a","map","attributes","join","close","render","stream","substring","reverse","splice","pop","substr","expand_mode","mode","variants","cached_variants","variant","endsWithParent","compileLanguage","reStr","source","langRe","global","RegExp","case_insensitive","compileMode","compiled","keywords","beginKeywords","compiled_keywords","flatten","str","kw","pair","Number","lexemesRe","lexemes","begin","beginRe","endSameAsBegin","end","endRe","terminator_end","illegal","illegalRe","relevance","contains","concat","apply","c","starts","terminators","filter","Boolean","highlight","name","ignore_illegals","continuation","escapeRe","subMode","endOfMode","endsParent","isIllegal","keywordMatch","match_str","hasOwnProperty","buildSpan","classname","insideSpan","leaveOpen","noPrefix","openSpan","closeSpan","processKeywords","keyword_match","last_index","top","mode_buffer","lastIndex","processSubLanguage","explicit","subLanguage","continuations","highlightAuto","processBuffer","startNewMode","create","processLexeme","buffer","new_mode","skip","excludeBegin","returnBegin","end_mode","origin","returnEnd","excludeEnd","Error","current","count","e","message","indexOf","text","languageSubset","second_best","autoDetection","fixMarkup","p1","buildClassName","prevClassName","currentLang","resultLang","trim","highlightBlock","originalStream","resultNode","document","createElementNS","innerHTML","textContent","configure","user_options","initHighlighting","called","blocks","querySelectorAll","initHighlightingOnLoad","addEventListener","lang","alias","listLanguages","disableAutodetect","IDENT_RE","UNDERSCORE_IDENT_RE","NUMBER_RE","C_NUMBER_RE","BINARY_NUMBER_RE","RE_STARTERS_RE","BACKSLASH_ESCAPE","APOS_STRING_MODE","QUOTE_STRING_MODE","PHRASAL_WORDS_MODE","COMMENT","inherits","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","HASH_COMMENT_MODE","NUMBER_MODE","C_NUMBER_MODE","BINARY_NUMBER_MODE","CSS_NUMBER_MODE","REGEXP_MODE","TITLE_MODE","UNDERSCORE_TITLE_MODE","METHOD_GUARD"],"mappings":"2GAAA,IAAAA,EAAWC,EAAQ,QAEnBD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,eAAsCD,EAAQ,SAC9CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,cAAqCD,EAAQ,SAC7CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,cAAqCD,EAAQ,SAC7CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,eAAsCD,EAAQ,SAC9CD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,eAAsCD,EAAQ,SAC9CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,IAA2BD,EAAQ,SACnCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,cAAqCD,EAAQ,SAC7CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,iBAAwCD,EAAQ,SAChDD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,cAAqCD,EAAQ,SAC7CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,cAAqCD,EAAQ,SAC7CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,IAA2BD,EAAQ,SACnCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,IAA2BD,EAAQ,SACnCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,gBAAuCD,EAAQ,SAC/CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,YAAmCD,EAAQ,SAC3CD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,eAAsCD,EAAQ,SAC9CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,aAAoCD,EAAQ,SAC5CD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,QAA+BD,EAAQ,SACvCD,EAAAE,iBAAA,WAAkCD,EAAQ,SAC1CD,EAAAE,iBAAA,gBAAuCD,EAAQ,SAC/CD,EAAAE,iBAAA,UAAiCD,EAAQ,SACzCD,EAAAE,iBAAA,OAA8BD,EAAQ,SACtCD,EAAAE,iBAAA,MAA6BD,EAAQ,SACrCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,KAA4BD,EAAQ,SACpCD,EAAAE,iBAAA,SAAgCD,EAAQ,SACxCD,EAAAE,iBAAA,SAAgCD,EAAQ,SAExCE,EAAAC,QAAAJ,yBCvLA,SAAAK,GAGA,kBAAAC,gBACA,kBAAAC,WAKAF,EAAAD,IATA,CAuBC,SAAAJ,GAED,IAAAQ,EAAA,GACAC,EAAAC,OAAAC,KAGAC,EAAA,GACAC,EAAA,GAGAC,EAAA,gCACAC,EAAA,8BACAC,EAAA,+BAEAC,EAAA,UAIAC,EAAA,CACAC,YAAA,QACAC,WAAA,KACAC,OAAA,EACAT,eAAAU,GAMA,SAAAC,EAAAC,GACA,OAAAA,EAAAC,QAAA,cAAqCA,QAAA,aAAsBA,QAAA,aAG3D,SAAAC,EAAAC,GACA,OAAAA,EAAAC,SAAAC,cAGA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,KAAAG,KAAAF,GACA,OAAAC,GAAA,IAAAA,EAAAE,MAGA,SAAAC,EAAAC,GACA,OAAAvB,EAAAwB,KAAAD,GAGA,SAAAE,EAAAC,GACA,IAAAC,EAAAR,EAAAS,EAAAC,EACAC,EAAAJ,EAAAK,UAAA,IAMA,GAJAD,GAAAJ,EAAAM,WAAAN,EAAAM,WAAAD,UAAA,GAGAZ,EAAAlB,EAAAmB,KAAAU,GACAX,EACA,OAAAc,EAAAd,EAAA,IAAAA,EAAA,kBAKA,IAFAW,IAAAI,MAAA,OAEAP,EAAA,EAAAC,EAAAE,EAAAF,OAAwCD,EAAAC,EAAYD,IAGpD,GAFAE,EAAAC,EAAAH,GAEAL,EAAAO,IAAAI,EAAAJ,GACA,OAAAA,EAKA,SAAAM,EAAAC,GACA,IAAAC,EACAC,EAAA,GACAC,EAAAC,MAAAC,UAAAC,MAAAC,KAAAC,UAAA,GAEA,IAAAP,KAAAD,EACAE,EAAAD,GAAAD,EAAAC,GAKA,OAJAE,EAAAM,QAAA,SAAAC,GACA,IAAAT,KAAAS,EACAR,EAAAD,GAAAS,EAAAT,KAEAC,EAKA,SAAAS,EAAAlC,GACA,IAAAyB,EAAA,GA0BA,OAzBA,SAAAU,EAAAnC,EAAAoC,GACA,QAAAC,EAAArC,EAAAsC,WAAuCD,EAAOA,IAAAE,YAC9C,IAAAF,EAAAG,SACAJ,GAAAC,EAAAI,UAAA1B,OACA,IAAAsB,EAAAG,WACAf,EAAAiB,KAAA,CACAC,MAAA,QACAP,SACApC,KAAAqC,IAEAD,EAAAD,EAAAE,EAAAD,GAIArC,EAAAsC,GAAA/B,MAAA,oBACAmB,EAAAiB,KAAA,CACAC,MAAA,OACAP,SACApC,KAAAqC,KAKA,OAAAD,EAvBA,CAwBKpC,EAAA,GACLyB,EAGA,SAAAmB,EAAAC,EAAAC,EAAAjD,GACA,IAAAkD,EAAA,EACAtB,EAAA,GACAuB,EAAA,GAEA,SAAAC,IACA,OAAAJ,EAAA9B,QAAA+B,EAAA/B,OAGA8B,EAAA,GAAAT,SAAAU,EAAA,GAAAV,OACAS,EAAA,GAAAT,OAAAU,EAAA,GAAAV,OAAAS,EAAAC,EAkBA,UAAAA,EAAA,GAAAH,MAAAE,EAAAC,EArBAD,EAAA9B,OAAA8B,EAAAC,EAwBA,SAAAI,EAAAlD,GACA,SAAAmD,EAAAC,GAA4B,UAAAA,EAAAnD,SAAA,KAAAL,EAAAwD,EAAAvD,OAAAC,QAAA,cAAqE,IACjG2B,GAAA,IAAA1B,EAAAC,GAAAnB,EAAAwE,IAAAvB,KAAA9B,EAAAsD,WAAAH,GAAAI,KAAA,QAGA,SAAAC,EAAAxD,GACAyB,GAAA,KAAA1B,EAAAC,GAAA,IAGA,SAAAyD,EAAAd,IACA,UAAAA,QAAAO,EAAAM,GAAAb,EAAA3C,MAGA,MAAA6C,EAAA9B,QAAA+B,EAAA/B,OAAA,CACA,IAAA2C,EAAAT,IAGA,GAFAxB,GAAA7B,EAAAC,EAAA8D,UAAAZ,EAAAW,EAAA,GAAAtB,SACAW,EAAAW,EAAA,GAAAtB,OACAsB,IAAAb,EAAA,CAOAG,EAAAY,UAAA5B,QAAAwB,GACA,GACAC,EAAAC,EAAAG,OAAA,SACAH,EAAAT,UACSS,IAAAb,GAAAa,EAAA3C,QAAA2C,EAAA,GAAAtB,SAAAW,GACTC,EAAAY,UAAA5B,QAAAkB,OAEA,UAAAQ,EAAA,GAAAf,MACAK,EAAAN,KAAAgB,EAAA,GAAA1D,MAEAgD,EAAAc,MAEAL,EAAAC,EAAAG,OAAA,SAGA,OAAApC,EAAA7B,EAAAC,EAAAkE,OAAAhB,IAKA,SAAAiB,EAAAC,GAMA,OALAA,EAAAC,WAAAD,EAAAE,kBACAF,EAAAE,gBAAAF,EAAAC,SAAAb,IAAA,SAAAe,GACA,OAAA9C,EAAA2C,EAAA,CAA8BC,SAAA,MAAeE,MAG7CH,EAAAE,iBAAAF,EAAAI,gBAAA,CAAA/C,EAAA2C,KAAA,CAAAA,GAGA,SAAAK,EAAA5D,GAEA,SAAA6D,EAAAnE,GACA,OAAAA,KAAAoE,QAAApE,EAGA,SAAAqE,EAAA5E,EAAA6E,GACA,WAAAC,OACAJ,EAAA1E,GACA,KAAAa,EAAAkE,iBAAA,SAAAF,EAAA,SAIA,SAAAG,EAAAZ,EAAA1C,GACA,IAAA0C,EAAAa,SAAA,CAKA,GAHAb,EAAAa,UAAA,EAEAb,EAAAc,SAAAd,EAAAc,UAAAd,EAAAe,cACAf,EAAAc,SAAA,CACA,IAAAE,EAAA,GAEAC,EAAA,SAAAhE,EAAAiE,GACAzE,EAAAkE,mBACAO,IAAAjF,eAEAiF,EAAA9D,MAAA,KAAAW,QAAA,SAAAoD,GACA,IAAAC,EAAAD,EAAA/D,MAAA,KACA4D,EAAAI,EAAA,KAAAnE,EAAAmE,EAAA,GAAAC,OAAAD,EAAA,UAIA,kBAAApB,EAAAc,SACAG,EAAA,UAAAjB,EAAAc,UAEAjG,EAAAmF,EAAAc,UAAA/C,QAAA,SAAAd,GACAgE,EAAAhE,EAAA+C,EAAAc,SAAA7D,MAGA+C,EAAAc,SAAAE,EAEAhB,EAAAsB,UAAAd,EAAAR,EAAAuB,SAAA,UAEAjE,IACA0C,EAAAe,gBACAf,EAAAwB,MAAA,OAAAxB,EAAAe,cAAA3D,MAAA,KAAAkC,KAAA,aAEAU,EAAAwB,QACAxB,EAAAwB,MAAA,SACAxB,EAAAyB,QAAAjB,EAAAR,EAAAwB,OACAxB,EAAA0B,iBACA1B,EAAA2B,IAAA3B,EAAAwB,OACAxB,EAAA2B,KAAA3B,EAAAI,iBACAJ,EAAA2B,IAAA,SACA3B,EAAA2B,MACA3B,EAAA4B,MAAApB,EAAAR,EAAA2B,MACA3B,EAAA6B,eAAAvB,EAAAN,EAAA2B,MAAA,GACA3B,EAAAI,gBAAA9C,EAAAuE,iBACA7B,EAAA6B,iBAAA7B,EAAA2B,IAAA,QAAArE,EAAAuE,iBAEA7B,EAAA8B,UACA9B,EAAA+B,UAAAvB,EAAAR,EAAA8B,UACA,MAAA9B,EAAAgC,YACAhC,EAAAgC,UAAA,GACAhC,EAAAiC,WACAjC,EAAAiC,SAAA,IAEAjC,EAAAiC,SAAAvE,MAAAC,UAAAuE,OAAAC,MAAA,GAAAnC,EAAAiC,SAAA7C,IAAA,SAAAgD,GACA,OAAArC,EAAA,SAAAqC,EAAApC,EAAAoC,MAEApC,EAAAiC,SAAAlE,QAAA,SAAAqE,GAAyCxB,EAAAwB,EAAApC,KAEzCA,EAAAqC,QACAzB,EAAAZ,EAAAqC,OAAA/E,GAGA,IAAAgF,EACAtC,EAAAiC,SAAA7C,IAAA,SAAAgD,GACA,OAAAA,EAAArB,cAAA,QAAAqB,EAAAZ,MAAA,QAAAY,EAAAZ,QAEAU,OAAA,CAAAlC,EAAA6B,eAAA7B,EAAA8B,UACA1C,IAAAkB,GACAiC,OAAAC,SACAxC,EAAAsC,cAAAxF,OAAA0D,EAAA8B,EAAAhD,KAAA,UAAqFhD,KAAA,WAAuB,eAG5GsE,EAAAnE,GAYA,SAAAgG,EAAAC,EAAA9G,EAAA+G,EAAAC,GAEA,SAAAC,EAAAjH,GACA,WAAA8E,OAAA9E,EAAAC,QAAA,yBAA2D,aAG3D,SAAAiH,EAAA1G,EAAA4D,GACA,IAAAnD,EAAAC,EAEA,IAAAD,EAAA,EAAAC,EAAAkD,EAAAiC,SAAAnF,OAAgDD,EAAAC,EAAYD,IAC5D,GAAAX,EAAA8D,EAAAiC,SAAApF,GAAA4E,QAAArF,GAIA,OAHA4D,EAAAiC,SAAApF,GAAA6E,iBACA1B,EAAAiC,SAAApF,GAAA+E,MAAAiB,EAAA7C,EAAAiC,SAAApF,GAAA4E,QAAAnF,KAAAF,GAAA,KAEA4D,EAAAiC,SAAApF,GAKA,SAAAkG,EAAA/C,EAAA5D,GACA,GAAAF,EAAA8D,EAAA4B,MAAAxF,GAAA,CACA,MAAA4D,EAAAgD,YAAAhD,EAAA1C,OACA0C,IAAA1C,OAEA,OAAA0C,EAEA,GAAAA,EAAAI,eACA,OAAA2C,EAAA/C,EAAA1C,OAAAlB,GAIA,SAAA6G,EAAA7G,EAAA4D,GACA,OAAA2C,GAAAzG,EAAA8D,EAAA+B,UAAA3F,GAGA,SAAA8G,EAAAlD,EAAA3D,GACA,IAAA8G,EAAA1G,EAAAkE,iBAAAtE,EAAA,GAAAJ,cAAAI,EAAA,GACA,OAAA2D,EAAAc,SAAAsC,eAAAD,IAAAnD,EAAAc,SAAAqC,GAGA,SAAAE,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAlI,EAAAkI,EAAA,GAAAnI,EAAAC,YACAmI,EAAA,gBAAAnI,EACAoI,EAAAH,EAAA,GAAAnI,EAIA,OAFAqI,GAAAJ,EAAA,KAEAI,EAAAH,EAAAI,EAGA,SAAAC,IACA,IAAAC,EAAAC,EAAAzH,EAAAmB,EAEA,IAAAuG,EAAAjD,SACA,OAAAnF,EAAAqI,GAEAxG,EAAA,GACAsG,EAAA,EACAC,EAAAzC,UAAA2C,UAAA,EACA5H,EAAA0H,EAAAzC,UAAAhF,KAAA0H,GAEA,MAAA3H,EACAmB,GAAA7B,EAAAqI,EAAAtE,UAAAoE,EAAAzH,EAAAE,QACAsH,EAAAX,EAAAa,EAAA1H,GACAwH,GACA7B,GAAA6B,EAAA,GACArG,GAAA6F,EAAAQ,EAAA,GAAAlI,EAAAU,EAAA,MAEAmB,GAAA7B,EAAAU,EAAA,IAEAyH,EAAAC,EAAAzC,UAAA2C,UACA5H,EAAA0H,EAAAzC,UAAAhF,KAAA0H,GAEA,OAAAxG,EAAA7B,EAAAqI,EAAAlE,OAAAgE,IAGA,SAAAI,IACA,IAAAC,EAAA,kBAAAJ,EAAAK,YACA,GAAAD,IAAAnJ,EAAA+I,EAAAK,aACA,OAAAzI,EAAAqI,GAGA,IAAAxG,EAAA2G,EACA1B,EAAAsB,EAAAK,YAAAJ,GAAA,EAAAK,EAAAN,EAAAK,cACAE,EAAAN,EAAAD,EAAAK,YAAAtH,OAAAiH,EAAAK,iBAAA1I,GAYA,OANAqI,EAAA/B,UAAA,IACAA,GAAAxE,EAAAwE,WAEAmC,IACAE,EAAAN,EAAAK,aAAA5G,EAAAuG,KAEAV,EAAA7F,EAAAf,SAAAe,EAAA5B,OAAA,MAGA,SAAA2I,IACA/G,GAAA,MAAAuG,EAAAK,YAAAF,IAAAN,IACAI,EAAA,GAGA,SAAAQ,EAAAxE,GACAxC,GAAAwC,EAAA/C,UAAAoG,EAAArD,EAAA/C,UAAA,UACA8G,EAAAjJ,OAAA2J,OAAAzE,EAAA,CAAiC1C,OAAA,CAAS1B,MAAAmI,KAG1C,SAAAW,EAAAC,EAAAvI,GAIA,GAFA4H,GAAAW,EAEA,MAAAvI,EAEA,OADAmI,IACA,EAGA,IAAAK,EAAA9B,EAAA1G,EAAA2H,GACA,GAAAa,EAaA,OAZAA,EAAAC,KACAb,GAAA5H,GAEAwI,EAAAE,eACAd,GAAA5H,GAEAmI,IACAK,EAAAG,aAAAH,EAAAE,eACAd,EAAA5H,IAGAoI,EAAAI,EAAAxI,GACAwI,EAAAG,YAAA,EAAA3I,EAAAU,OAGA,IAAAkI,EAAAjC,EAAAgB,EAAA3H,GACA,GAAA4I,EAAA,CACA,IAAAC,EAAAlB,EACAkB,EAAAJ,KACAb,GAAA5H,GAEA6I,EAAAC,WAAAD,EAAAE,aACAnB,GAAA5H,GAEAmI,IACAU,EAAAE,aACAnB,EAAA5H,IAGA,GACA2H,EAAA9G,YACAO,GAAAnC,GAEA0I,EAAAc,MAAAd,EAAAK,cACApC,GAAA+B,EAAA/B,WAEA+B,IAAAzG,aACSyG,IAAAiB,EAAA1H,QAOT,OANA0H,EAAA3C,SACA2C,EAAAtD,iBACAsD,EAAA3C,OAAAT,MAAAoD,EAAApD,OAEA4C,EAAAQ,EAAA3C,OAAA,KAEA4C,EAAAC,UAAA,EAAA9I,EAAAU,OAGA,GAAAmG,EAAA7G,EAAA2H,GACA,UAAAqB,MAAA,mBAAAhJ,EAAA,gBAAA2H,EAAA9G,WAAA,kBAQA,OADA+G,GAAA5H,EACAA,EAAAU,QAAA,EAGA,IAAAL,EAAAU,EAAAuF,GACA,IAAAjG,EACA,UAAA2I,MAAA,sBAAA1C,EAAA,KAGArC,EAAA5D,GACA,IAEA4I,EAFAtB,EAAAnB,GAAAnG,EACA4H,EAAA,GACA7G,EAAA,GACA,IAAA6H,EAAAtB,EAAsBsB,IAAA5I,EAAsB4I,IAAA/H,OAC5C+H,EAAApI,YACAO,EAAA6F,EAAAgC,EAAApI,UAAA,OAAAO,GAGA,IAAAwG,EAAA,GACAhC,EAAA,EACA,IACA,IAAA3F,EAAAiJ,EAAA/I,EAAA,EACA,SAGA,GAFAwH,EAAAzB,YAAA2B,UAAA1H,EACAF,EAAA0H,EAAAzB,YAAAhG,KAAAV,IACAS,EACA,MACAiJ,EAAAZ,EAAA9I,EAAA8D,UAAAnD,EAAAF,EAAAE,OAAAF,EAAA,IACAE,EAAAF,EAAAE,MAAA+I,EAGA,IADAZ,EAAA9I,EAAAkE,OAAAvD,IACA8I,EAAAtB,EAAwBsB,EAAA/H,OAAgB+H,IAAA/H,OACxC+H,EAAApI,YACAO,GAAAnC,GAGA,OACA2G,YACApG,MAAA4B,EACAf,SAAAiG,EACAqB,OAEK,MAAAwB,GACL,GAAAA,EAAAC,UAAA,IAAAD,EAAAC,QAAAC,QAAA,WACA,OACAzD,UAAA,EACApG,MAAAD,EAAAC,IAGA,MAAA2J,GAgBA,SAAAjB,EAAAoB,EAAAC,GACAA,KAAArK,EAAAN,WAAAH,EAAAG,GACA,IAAAwC,EAAA,CACAwE,UAAA,EACApG,MAAAD,EAAA+J,IAEAE,EAAApI,EAeA,OAdAmI,EAAApD,OAAApF,GAAAoF,OAAAsD,GAAA9H,QAAA,SAAA2E,GACA,IAAA2C,EAAA5C,EAAAC,EAAAgD,GAAA,GACAL,EAAA5I,SAAAiG,EACA2C,EAAArD,UAAA4D,EAAA5D,YACA4D,EAAAP,GAEAA,EAAArD,UAAAxE,EAAAwE,YACA4D,EAAApI,EACAA,EAAA6H,KAGAO,EAAAnJ,WACAe,EAAAoI,eAEApI,EAUA,SAAAsI,EAAAlK,GACA,OAAAN,EAAAE,YAAAF,EAAAG,MAEAG,EAAAC,QAAAT,EAAA,SAAAiB,EAAA0J,GACA,OAAAzK,EAAAG,OAAA,OAAAY,EACA,OACWf,EAAAE,WACXuK,EAAAlK,QAAA,MAAAP,EAAAE,YAEA,KAPAI,EAWA,SAAAoK,EAAAC,EAAAC,EAAAC,GACA,IAAA1J,EAAAyJ,EAAAjL,EAAAiL,GAAAC,EACA3I,EAAA,CAAAyI,EAAAG,QAUA,OARAH,EAAA5J,MAAA,aACAmB,EAAAiB,KAAA,SAGA,IAAAwH,EAAAR,QAAAhJ,IACAe,EAAAiB,KAAAhC,GAGAe,EAAA8B,KAAA,KAAA8G,OAOA,SAAAC,EAAAzJ,GACA,IAAAb,EAAAuK,EAAA9I,EAAA+I,EAAAb,EACAjJ,EAAAE,EAAAC,GAEAJ,EAAAC,KAGAnB,EAAAG,OACAM,EAAAyK,SAAAC,gBAAA,sCACA1K,EAAA2K,UAAA9J,EAAA8J,UAAA7K,QAAA,UAAAA,QAAA,qBAEAE,EAAAa,EAEA8I,EAAA3J,EAAA4K,YACAnJ,EAAAf,EAAAgG,EAAAhG,EAAAiJ,GAAA,GAAApB,EAAAoB,GAEAY,EAAArI,EAAAlC,GACAuK,EAAAxJ,SACAyJ,EAAAC,SAAAC,gBAAA,sCACAF,EAAAG,UAAAlJ,EAAA5B,MACA4B,EAAA5B,MAAA+C,EAAA2H,EAAArI,EAAAsI,GAAAb,IAEAlI,EAAA5B,MAAAkK,EAAAtI,EAAA5B,OAEAgB,EAAA8J,UAAAlJ,EAAA5B,MACAgB,EAAAK,UAAA+I,EAAApJ,EAAAK,UAAAR,EAAAe,EAAAf,UACAG,EAAAY,OAAA,CACAf,SAAAe,EAAAf,SACAN,GAAAqB,EAAAwE,WAEAxE,EAAAoI,cACAhJ,EAAAgJ,YAAA,CACAnJ,SAAAe,EAAAoI,YAAAnJ,SACAN,GAAAqB,EAAAoI,YAAA5D,aAQA,SAAA4E,EAAAC,GACAvL,EAAA+B,EAAA/B,EAAAuL,GAMA,SAAAC,IACA,IAAAA,EAAAC,OAAA,CAEAD,EAAAC,QAAA,EAEA,IAAAC,EAAAR,SAAAS,iBAAA,YACArM,EAAAmD,QAAAF,KAAAmJ,EAAAX,IAMA,SAAAa,IACAC,iBAAA,mBAAAL,GAAA,GACAK,iBAAA,OAAAL,GAAA,GAGA,SAAAxM,EAAAoI,EAAAjG,GACA,IAAA2K,EAAApM,EAAA0H,GAAAjG,EAAArC,GACAgN,EAAAnM,SACAmM,EAAAnM,QAAA8C,QAAA,SAAAsJ,GAA4CpM,EAAAoM,GAAA3E,IAI5C,SAAA4E,IACA,OAAAzM,EAAAG,GAGA,SAAAmC,EAAAuF,GAEA,OADAA,MAAA,IAAAzG,cACAjB,EAAA0H,IAAA1H,EAAAC,EAAAyH,IAGA,SAAAmD,EAAAnD,GACA,IAAA0E,EAAAjK,EAAAuF,GACA,OAAA0E,MAAAG,kBA0HA,OArHAnN,EAAAqI,YACArI,EAAAkK,gBACAlK,EAAA0L,YACA1L,EAAAiM,iBACAjM,EAAAwM,YACAxM,EAAA0M,mBACA1M,EAAA8M,yBACA9M,EAAAE,mBACAF,EAAAkN,gBACAlN,EAAA+C,cACA/C,EAAAyL,gBACAzL,EAAAiD,UAGAjD,EAAAoN,SAAA,eACApN,EAAAqN,oBAAA,gBACArN,EAAAsN,UAAA,oBACAtN,EAAAuN,YAAA,yEACAvN,EAAAwN,iBAAA,eACAxN,EAAAyN,eAAA,+IAGAzN,EAAA0N,iBAAA,CACAtG,MAAA,eAAAQ,UAAA,GAEA5H,EAAA2N,iBAAA,CACA9K,UAAA,SACAuE,MAAA,IAAAG,IAAA,IACAG,QAAA,MACAG,SAAA,CAAA7H,EAAA0N,mBAEA1N,EAAA4N,kBAAA,CACA/K,UAAA,SACAuE,MAAA,IAAAG,IAAA,IACAG,QAAA,MACAG,SAAA,CAAA7H,EAAA0N,mBAEA1N,EAAA6N,mBAAA,CACAzG,MAAA,8IAEApH,EAAA8N,QAAA,SAAA1G,EAAAG,EAAAwG,GACA,IAAAnI,EAAA5F,EAAAiD,QACA,CACAJ,UAAA,UACAuE,QAAAG,MACAM,SAAA,IAEAkG,GAAA,IAQA,OANAnI,EAAAiC,SAAAxD,KAAArE,EAAA6N,oBACAjI,EAAAiC,SAAAxD,KAAA,CACAxB,UAAA,SACAuE,MAAA,+BACAQ,UAAA,IAEAhC,GAEA5F,EAAAgO,oBAAAhO,EAAA8N,QAAA,UACA9N,EAAAiO,qBAAAjO,EAAA8N,QAAA,eACA9N,EAAAkO,kBAAAlO,EAAA8N,QAAA,SACA9N,EAAAmO,YAAA,CACAtL,UAAA,SACAuE,MAAApH,EAAAsN,UACA1F,UAAA,GAEA5H,EAAAoO,cAAA,CACAvL,UAAA,SACAuE,MAAApH,EAAAuN,YACA3F,UAAA,GAEA5H,EAAAqO,mBAAA,CACAxL,UAAA,SACAuE,MAAApH,EAAAwN,iBACA5F,UAAA,GAEA5H,EAAAsO,gBAAA,CACAzL,UAAA,SACAuE,MAAApH,EAAAsN,UAAA,kGASA1F,UAAA,GAEA5H,EAAAuO,YAAA,CACA1L,UAAA,SACAuE,MAAA,KAAAG,IAAA,aACAG,QAAA,KACAG,SAAA,CACA7H,EAAA0N,iBACA,CACAtG,MAAA,KAAAG,IAAA,KACAK,UAAA,EACAC,SAAA,CAAA7H,EAAA0N,qBAIA1N,EAAAwO,WAAA,CACA3L,UAAA,QACAuE,MAAApH,EAAAoN,SACAxF,UAAA,GAEA5H,EAAAyO,sBAAA,CACA5L,UAAA,QACAuE,MAAApH,EAAAqN,oBACAzF,UAAA,GAEA5H,EAAA0O,aAAA,CAEAtH,MAAA,UAAApH,EAAAqN,oBACAzF,UAAA,GAGA5H","file":"js/chunk-vendors~ce790cf7.6e83865a.js","sourcesContent":["var hljs = require('./highlight');\n\nhljs.registerLanguage('1c', require('./languages/1c'));\nhljs.registerLanguage('abnf', require('./languages/abnf'));\nhljs.registerLanguage('accesslog', require('./languages/accesslog'));\nhljs.registerLanguage('actionscript', require('./languages/actionscript'));\nhljs.registerLanguage('ada', require('./languages/ada'));\nhljs.registerLanguage('angelscript', require('./languages/angelscript'));\nhljs.registerLanguage('apache', require('./languages/apache'));\nhljs.registerLanguage('applescript', require('./languages/applescript'));\nhljs.registerLanguage('arcade', require('./languages/arcade'));\nhljs.registerLanguage('cpp', require('./languages/cpp'));\nhljs.registerLanguage('arduino', require('./languages/arduino'));\nhljs.registerLanguage('armasm', require('./languages/armasm'));\nhljs.registerLanguage('xml', require('./languages/xml'));\nhljs.registerLanguage('asciidoc', require('./languages/asciidoc'));\nhljs.registerLanguage('aspectj', require('./languages/aspectj'));\nhljs.registerLanguage('autohotkey', require('./languages/autohotkey'));\nhljs.registerLanguage('autoit', require('./languages/autoit'));\nhljs.registerLanguage('avrasm', require('./languages/avrasm'));\nhljs.registerLanguage('awk', require('./languages/awk'));\nhljs.registerLanguage('axapta', require('./languages/axapta'));\nhljs.registerLanguage('bash', require('./languages/bash'));\nhljs.registerLanguage('basic', require('./languages/basic'));\nhljs.registerLanguage('bnf', require('./languages/bnf'));\nhljs.registerLanguage('brainfuck', require('./languages/brainfuck'));\nhljs.registerLanguage('cal', require('./languages/cal'));\nhljs.registerLanguage('capnproto', require('./languages/capnproto'));\nhljs.registerLanguage('ceylon', require('./languages/ceylon'));\nhljs.registerLanguage('clean', require('./languages/clean'));\nhljs.registerLanguage('clojure', require('./languages/clojure'));\nhljs.registerLanguage('clojure-repl', require('./languages/clojure-repl'));\nhljs.registerLanguage('cmake', require('./languages/cmake'));\nhljs.registerLanguage('coffeescript', require('./languages/coffeescript'));\nhljs.registerLanguage('coq', require('./languages/coq'));\nhljs.registerLanguage('cos', require('./languages/cos'));\nhljs.registerLanguage('crmsh', require('./languages/crmsh'));\nhljs.registerLanguage('crystal', require('./languages/crystal'));\nhljs.registerLanguage('cs', require('./languages/cs'));\nhljs.registerLanguage('csp', require('./languages/csp'));\nhljs.registerLanguage('css', require('./languages/css'));\nhljs.registerLanguage('d', require('./languages/d'));\nhljs.registerLanguage('markdown', require('./languages/markdown'));\nhljs.registerLanguage('dart', require('./languages/dart'));\nhljs.registerLanguage('delphi', require('./languages/delphi'));\nhljs.registerLanguage('diff', require('./languages/diff'));\nhljs.registerLanguage('django', require('./languages/django'));\nhljs.registerLanguage('dns', require('./languages/dns'));\nhljs.registerLanguage('dockerfile', require('./languages/dockerfile'));\nhljs.registerLanguage('dos', require('./languages/dos'));\nhljs.registerLanguage('dsconfig', require('./languages/dsconfig'));\nhljs.registerLanguage('dts', require('./languages/dts'));\nhljs.registerLanguage('dust', require('./languages/dust'));\nhljs.registerLanguage('ebnf', require('./languages/ebnf'));\nhljs.registerLanguage('elixir', require('./languages/elixir'));\nhljs.registerLanguage('elm', require('./languages/elm'));\nhljs.registerLanguage('ruby', require('./languages/ruby'));\nhljs.registerLanguage('erb', require('./languages/erb'));\nhljs.registerLanguage('erlang-repl', require('./languages/erlang-repl'));\nhljs.registerLanguage('erlang', require('./languages/erlang'));\nhljs.registerLanguage('excel', require('./languages/excel'));\nhljs.registerLanguage('fix', require('./languages/fix'));\nhljs.registerLanguage('flix', require('./languages/flix'));\nhljs.registerLanguage('fortran', require('./languages/fortran'));\nhljs.registerLanguage('fsharp', require('./languages/fsharp'));\nhljs.registerLanguage('gams', require('./languages/gams'));\nhljs.registerLanguage('gauss', require('./languages/gauss'));\nhljs.registerLanguage('gcode', require('./languages/gcode'));\nhljs.registerLanguage('gherkin', require('./languages/gherkin'));\nhljs.registerLanguage('glsl', require('./languages/glsl'));\nhljs.registerLanguage('gml', require('./languages/gml'));\nhljs.registerLanguage('go', require('./languages/go'));\nhljs.registerLanguage('golo', require('./languages/golo'));\nhljs.registerLanguage('gradle', require('./languages/gradle'));\nhljs.registerLanguage('groovy', require('./languages/groovy'));\nhljs.registerLanguage('haml', require('./languages/haml'));\nhljs.registerLanguage('handlebars', require('./languages/handlebars'));\nhljs.registerLanguage('haskell', require('./languages/haskell'));\nhljs.registerLanguage('haxe', require('./languages/haxe'));\nhljs.registerLanguage('hsp', require('./languages/hsp'));\nhljs.registerLanguage('htmlbars', require('./languages/htmlbars'));\nhljs.registerLanguage('http', require('./languages/http'));\nhljs.registerLanguage('hy', require('./languages/hy'));\nhljs.registerLanguage('inform7', require('./languages/inform7'));\nhljs.registerLanguage('ini', require('./languages/ini'));\nhljs.registerLanguage('irpf90', require('./languages/irpf90'));\nhljs.registerLanguage('isbl', require('./languages/isbl'));\nhljs.registerLanguage('java', require('./languages/java'));\nhljs.registerLanguage('javascript', require('./languages/javascript'));\nhljs.registerLanguage('jboss-cli', require('./languages/jboss-cli'));\nhljs.registerLanguage('json', require('./languages/json'));\nhljs.registerLanguage('julia', require('./languages/julia'));\nhljs.registerLanguage('julia-repl', require('./languages/julia-repl'));\nhljs.registerLanguage('kotlin', require('./languages/kotlin'));\nhljs.registerLanguage('lasso', require('./languages/lasso'));\nhljs.registerLanguage('ldif', require('./languages/ldif'));\nhljs.registerLanguage('leaf', require('./languages/leaf'));\nhljs.registerLanguage('less', require('./languages/less'));\nhljs.registerLanguage('lisp', require('./languages/lisp'));\nhljs.registerLanguage('livecodeserver', require('./languages/livecodeserver'));\nhljs.registerLanguage('livescript', require('./languages/livescript'));\nhljs.registerLanguage('llvm', require('./languages/llvm'));\nhljs.registerLanguage('lsl', require('./languages/lsl'));\nhljs.registerLanguage('lua', require('./languages/lua'));\nhljs.registerLanguage('makefile', require('./languages/makefile'));\nhljs.registerLanguage('mathematica', require('./languages/mathematica'));\nhljs.registerLanguage('matlab', require('./languages/matlab'));\nhljs.registerLanguage('maxima', require('./languages/maxima'));\nhljs.registerLanguage('mel', require('./languages/mel'));\nhljs.registerLanguage('mercury', require('./languages/mercury'));\nhljs.registerLanguage('mipsasm', require('./languages/mipsasm'));\nhljs.registerLanguage('mizar', require('./languages/mizar'));\nhljs.registerLanguage('perl', require('./languages/perl'));\nhljs.registerLanguage('mojolicious', require('./languages/mojolicious'));\nhljs.registerLanguage('monkey', require('./languages/monkey'));\nhljs.registerLanguage('moonscript', require('./languages/moonscript'));\nhljs.registerLanguage('n1ql', require('./languages/n1ql'));\nhljs.registerLanguage('nginx', require('./languages/nginx'));\nhljs.registerLanguage('nimrod', require('./languages/nimrod'));\nhljs.registerLanguage('nix', require('./languages/nix'));\nhljs.registerLanguage('nsis', require('./languages/nsis'));\nhljs.registerLanguage('objectivec', require('./languages/objectivec'));\nhljs.registerLanguage('ocaml', require('./languages/ocaml'));\nhljs.registerLanguage('openscad', require('./languages/openscad'));\nhljs.registerLanguage('oxygene', require('./languages/oxygene'));\nhljs.registerLanguage('parser3', require('./languages/parser3'));\nhljs.registerLanguage('pf', require('./languages/pf'));\nhljs.registerLanguage('pgsql', require('./languages/pgsql'));\nhljs.registerLanguage('php', require('./languages/php'));\nhljs.registerLanguage('plaintext', require('./languages/plaintext'));\nhljs.registerLanguage('pony', require('./languages/pony'));\nhljs.registerLanguage('powershell', require('./languages/powershell'));\nhljs.registerLanguage('processing', require('./languages/processing'));\nhljs.registerLanguage('profile', require('./languages/profile'));\nhljs.registerLanguage('prolog', require('./languages/prolog'));\nhljs.registerLanguage('properties', require('./languages/properties'));\nhljs.registerLanguage('protobuf', require('./languages/protobuf'));\nhljs.registerLanguage('puppet', require('./languages/puppet'));\nhljs.registerLanguage('purebasic', require('./languages/purebasic'));\nhljs.registerLanguage('python', require('./languages/python'));\nhljs.registerLanguage('q', require('./languages/q'));\nhljs.registerLanguage('qml', require('./languages/qml'));\nhljs.registerLanguage('r', require('./languages/r'));\nhljs.registerLanguage('reasonml', require('./languages/reasonml'));\nhljs.registerLanguage('rib', require('./languages/rib'));\nhljs.registerLanguage('roboconf', require('./languages/roboconf'));\nhljs.registerLanguage('routeros', require('./languages/routeros'));\nhljs.registerLanguage('rsl', require('./languages/rsl'));\nhljs.registerLanguage('ruleslanguage', require('./languages/ruleslanguage'));\nhljs.registerLanguage('rust', require('./languages/rust'));\nhljs.registerLanguage('sas', require('./languages/sas'));\nhljs.registerLanguage('scala', require('./languages/scala'));\nhljs.registerLanguage('scheme', require('./languages/scheme'));\nhljs.registerLanguage('scilab', require('./languages/scilab'));\nhljs.registerLanguage('scss', require('./languages/scss'));\nhljs.registerLanguage('shell', require('./languages/shell'));\nhljs.registerLanguage('smali', require('./languages/smali'));\nhljs.registerLanguage('smalltalk', require('./languages/smalltalk'));\nhljs.registerLanguage('sml', require('./languages/sml'));\nhljs.registerLanguage('sqf', require('./languages/sqf'));\nhljs.registerLanguage('sql', require('./languages/sql'));\nhljs.registerLanguage('stan', require('./languages/stan'));\nhljs.registerLanguage('stata', require('./languages/stata'));\nhljs.registerLanguage('step21', require('./languages/step21'));\nhljs.registerLanguage('stylus', require('./languages/stylus'));\nhljs.registerLanguage('subunit', require('./languages/subunit'));\nhljs.registerLanguage('swift', require('./languages/swift'));\nhljs.registerLanguage('taggerscript', require('./languages/taggerscript'));\nhljs.registerLanguage('yaml', require('./languages/yaml'));\nhljs.registerLanguage('tap', require('./languages/tap'));\nhljs.registerLanguage('tcl', require('./languages/tcl'));\nhljs.registerLanguage('tex', require('./languages/tex'));\nhljs.registerLanguage('thrift', require('./languages/thrift'));\nhljs.registerLanguage('tp', require('./languages/tp'));\nhljs.registerLanguage('twig', require('./languages/twig'));\nhljs.registerLanguage('typescript', require('./languages/typescript'));\nhljs.registerLanguage('vala', require('./languages/vala'));\nhljs.registerLanguage('vbnet', require('./languages/vbnet'));\nhljs.registerLanguage('vbscript', require('./languages/vbscript'));\nhljs.registerLanguage('vbscript-html', require('./languages/vbscript-html'));\nhljs.registerLanguage('verilog', require('./languages/verilog'));\nhljs.registerLanguage('vhdl', require('./languages/vhdl'));\nhljs.registerLanguage('vim', require('./languages/vim'));\nhljs.registerLanguage('x86asm', require('./languages/x86asm'));\nhljs.registerLanguage('xl', require('./languages/xl'));\nhljs.registerLanguage('xquery', require('./languages/xquery'));\nhljs.registerLanguage('zephir', require('./languages/zephir'));\n\nmodule.exports = hljs;","/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\n(function(factory) {\n\n  // Find the global object for export to both the browser and web workers.\n  var globalObject = typeof window === 'object' && window ||\n                     typeof self === 'object' && self;\n\n  // Setup highlight.js for different environments. First is Node.js or\n  // CommonJS.\n  if(typeof exports !== 'undefined') {\n    factory(exports);\n  } else if(globalObject) {\n    // Export hljs globally even when using AMD for cases when this script\n    // is loaded with others that may still expect a global hljs.\n    globalObject.hljs = factory({});\n\n    // Finally register the global hljs with AMD.\n    if(typeof define === 'function' && define.amd) {\n      define([], function() {\n        return globalObject.hljs;\n      });\n    }\n  }\n\n}(function(hljs) {\n  // Convenience variables for build-in objects\n  var ArrayProto = [],\n      objectKeys = Object.keys;\n\n  // Global internal variables used within the highlight.js library.\n  var languages = {},\n      aliases   = {};\n\n  // Regular expressions used throughout the highlight.js library.\n  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,\n      languagePrefixRe = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n      fixMarkupRe      = /((^(<[^>]+>|\\t|)+|(?:\\n)))/gm;\n\n  var spanEndTag = '</span>';\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  var options = {\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: undefined\n  };\n\n\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n  function tag(node) {\n    return node.nodeName.toLowerCase();\n  }\n\n  function testRe(re, lexeme) {\n    var match = re && re.exec(lexeme);\n    return match && match.index === 0;\n  }\n\n  function isNotHighlighted(language) {\n    return noHighlightRe.test(language);\n  }\n\n  function blockLanguage(block) {\n    var i, match, length, _class;\n    var classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    match = languagePrefixRe.exec(classes);\n    if (match) {\n      return getLanguage(match[1]) ? match[1] : 'no-highlight';\n    }\n\n    classes = classes.split(/\\s+/);\n\n    for (i = 0, length = classes.length; i < length; i++) {\n      _class = classes[i]\n\n      if (isNotHighlighted(_class) || getLanguage(_class)) {\n        return _class;\n      }\n    }\n  }\n\n  function inherit(parent) {  // inherit(parent, override_obj, override_obj, ...)\n    var key;\n    var result = {};\n    var objects = Array.prototype.slice.call(arguments, 1);\n\n    for (key in parent)\n      result[key] = parent[key];\n    objects.forEach(function(obj) {\n      for (key in obj)\n        result[key] = obj[key];\n    });\n    return result;\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function _nodeStream(node, offset) {\n      for (var child = node.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType === 3)\n          offset += child.nodeValue.length;\n        else if (child.nodeType === 1) {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: child\n          });\n          offset = _nodeStream(child, offset);\n          // Prevent void elements from having an end tag that would actually\n          // double them in the output. There are more void elements in HTML\n          // but we list only those realistically expected in code display.\n          if (!tag(child).match(/br|hr|img|input/)) {\n            result.push({\n              event: 'stop',\n              offset: offset,\n              node: child\n            });\n          }\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n\n  function mergeStreams(original, highlighted, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (!original.length || !highlighted.length) {\n        return original.length ? original : highlighted;\n      }\n      if (original[0].offset !== highlighted[0].offset) {\n        return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n      }\n\n      /*\n      To avoid starting the stream just before it should stop the order is\n      ensured that original always starts first and closes last:\n\n      if (event1 == 'start' && event2 == 'start')\n        return original;\n      if (event1 == 'start' && event2 == 'stop')\n        return highlighted;\n      if (event1 == 'stop' && event2 == 'start')\n        return original;\n      if (event1 == 'stop' && event2 == 'stop')\n        return highlighted;\n\n      ... which is collapsed to:\n      */\n      return highlighted[0].event === 'start' ? original : highlighted;\n    }\n\n    function open(node) {\n      function attr_str(a) {return ' ' + a.nodeName + '=\"' + escape(a.value).replace('\"', '&quot;') + '\"';}\n      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';\n    }\n\n    function close(node) {\n      result += '</' + tag(node) + '>';\n    }\n\n    function render(event) {\n      (event.event === 'start' ? open : close)(event.node);\n    }\n\n    while (original.length || highlighted.length) {\n      var stream = selectStream();\n      result += escape(value.substring(processed, stream[0].offset));\n      processed = stream[0].offset;\n      if (stream === original) {\n        /*\n        On any opening or closing tag of the original markup we first close\n        the entire highlighted node stack, then render the original tag along\n        with all the following original tags at the same offset and then\n        reopen all the tags on the highlighted stack.\n        */\n        nodeStack.reverse().forEach(close);\n        do {\n          render(stream.splice(0, 1)[0]);\n          stream = selectStream();\n        } while (stream === original && stream.length && stream[0].offset === processed);\n        nodeStack.reverse().forEach(open);\n      } else {\n        if (stream[0].event === 'start') {\n          nodeStack.push(stream[0].node);\n        } else {\n          nodeStack.pop();\n        }\n        render(stream.splice(0, 1)[0]);\n      }\n    }\n    return result + escape(value.substr(processed));\n  }\n\n  /* Initialization */\n\n  function expand_mode(mode) {\n    if (mode.variants && !mode.cached_variants) {\n      mode.cached_variants = mode.variants.map(function(variant) {\n        return inherit(mode, {variants: null}, variant);\n      });\n    }\n    return mode.cached_variants || (mode.endsWithParent && [inherit(mode)]) || [mode];\n  }\n\n  function compileLanguage(language) {\n\n    function reStr(re) {\n        return (re && re.source) || re;\n    }\n\n    function langRe(value, global) {\n      return new RegExp(\n        reStr(value),\n        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n      );\n    }\n\n    function compileMode(mode, parent) {\n      if (mode.compiled)\n        return;\n      mode.compiled = true;\n\n      mode.keywords = mode.keywords || mode.beginKeywords;\n      if (mode.keywords) {\n        var compiled_keywords = {};\n\n        var flatten = function(className, str) {\n          if (language.case_insensitive) {\n            str = str.toLowerCase();\n          }\n          str.split(' ').forEach(function(kw) {\n            var pair = kw.split('|');\n            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n          });\n        };\n\n        if (typeof mode.keywords === 'string') { // string\n          flatten('keyword', mode.keywords);\n        } else {\n          objectKeys(mode.keywords).forEach(function (className) {\n            flatten(className, mode.keywords[className]);\n          });\n        }\n        mode.keywords = compiled_keywords;\n      }\n      mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\n      if (parent) {\n        if (mode.beginKeywords) {\n          mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\\\b';\n        }\n        if (!mode.begin)\n          mode.begin = /\\B|\\b/;\n        mode.beginRe = langRe(mode.begin);\n        if (mode.endSameAsBegin)\n          mode.end = mode.begin;\n        if (!mode.end && !mode.endsWithParent)\n          mode.end = /\\B|\\b/;\n        if (mode.end)\n          mode.endRe = langRe(mode.end);\n        mode.terminator_end = reStr(mode.end) || '';\n        if (mode.endsWithParent && parent.terminator_end)\n          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n      }\n      if (mode.illegal)\n        mode.illegalRe = langRe(mode.illegal);\n      if (mode.relevance == null)\n        mode.relevance = 1;\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function(c) {\n        return expand_mode(c === 'self' ? mode : c)\n      }));\n      mode.contains.forEach(function(c) {compileMode(c, mode);});\n\n      if (mode.starts) {\n        compileMode(mode.starts, parent);\n      }\n\n      var terminators =\n        mode.contains.map(function(c) {\n          return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin;\n        })\n        .concat([mode.terminator_end, mode.illegal])\n        .map(reStr)\n        .filter(Boolean);\n      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};\n    }\n\n    compileMode(language);\n  }\n\n  /*\n  Core highlighting function. Accepts a language name, or an alias, and a\n  string with the code to highlight. Returns an object with the following\n  properties:\n\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n\n  */\n  function highlight(name, value, ignore_illegals, continuation) {\n\n    function escapeRe(value) {\n      return new RegExp(value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'm');\n    }\n\n    function subMode(lexeme, mode) {\n      var i, length;\n\n      for (i = 0, length = mode.contains.length; i < length; i++) {\n        if (testRe(mode.contains[i].beginRe, lexeme)) {\n          if (mode.contains[i].endSameAsBegin) {\n            mode.contains[i].endRe = escapeRe( mode.contains[i].beginRe.exec(lexeme)[0] );\n          }\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode, lexeme) {\n      if (testRe(mode.endRe, lexeme)) {\n        while (mode.endsParent && mode.parent) {\n          mode = mode.parent;\n        }\n        return mode;\n      }\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, lexeme);\n      }\n    }\n\n    function isIllegal(lexeme, mode) {\n      return !ignore_illegals && testRe(mode.illegalRe, lexeme);\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n    }\n\n    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {\n      var classPrefix = noPrefix ? '' : options.classPrefix,\n          openSpan    = '<span class=\"' + classPrefix,\n          closeSpan   = leaveOpen ? '' : spanEndTag\n\n      openSpan += classname + '\">';\n\n      return openSpan + insideSpan + closeSpan;\n    }\n\n    function processKeywords() {\n      var keyword_match, last_index, match, result;\n\n      if (!top.keywords)\n        return escape(mode_buffer);\n\n      result = '';\n      last_index = 0;\n      top.lexemesRe.lastIndex = 0;\n      match = top.lexemesRe.exec(mode_buffer);\n\n      while (match) {\n        result += escape(mode_buffer.substring(last_index, match.index));\n        keyword_match = keywordMatch(top, match);\n        if (keyword_match) {\n          relevance += keyword_match[1];\n          result += buildSpan(keyword_match[0], escape(match[0]));\n        } else {\n          result += escape(match[0]);\n        }\n        last_index = top.lexemesRe.lastIndex;\n        match = top.lexemesRe.exec(mode_buffer);\n      }\n      return result + escape(mode_buffer.substr(last_index));\n    }\n\n    function processSubLanguage() {\n      var explicit = typeof top.subLanguage === 'string';\n      if (explicit && !languages[top.subLanguage]) {\n        return escape(mode_buffer);\n      }\n\n      var result = explicit ?\n                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :\n                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      if (explicit) {\n        continuations[top.subLanguage] = result.top;\n      }\n      return buildSpan(result.language, result.value, false, true);\n    }\n\n    function processBuffer() {\n      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());\n      mode_buffer = '';\n    }\n\n    function startNewMode(mode) {\n      result += mode.className? buildSpan(mode.className, '', true): '';\n      top = Object.create(mode, {parent: {value: top}});\n    }\n\n    function processLexeme(buffer, lexeme) {\n\n      mode_buffer += buffer;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      var new_mode = subMode(lexeme, top);\n      if (new_mode) {\n        if (new_mode.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (new_mode.excludeBegin) {\n            mode_buffer += lexeme;\n          }\n          processBuffer();\n          if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n            mode_buffer = lexeme;\n          }\n        }\n        startNewMode(new_mode, lexeme);\n        return new_mode.returnBegin ? 0 : lexeme.length;\n      }\n\n      var end_mode = endOfMode(top, lexeme);\n      if (end_mode) {\n        var origin = top;\n        if (origin.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (!(origin.returnEnd || origin.excludeEnd)) {\n            mode_buffer += lexeme;\n          }\n          processBuffer();\n          if (origin.excludeEnd) {\n            mode_buffer = lexeme;\n          }\n        }\n        do {\n          if (top.className) {\n            result += spanEndTag;\n          }\n          if (!top.skip && !top.subLanguage) {\n            relevance += top.relevance;\n          }\n          top = top.parent;\n        } while (top !== end_mode.parent);\n        if (end_mode.starts) {\n          if (end_mode.endSameAsBegin) {\n            end_mode.starts.endRe = end_mode.endRe;\n          }\n          startNewMode(end_mode.starts, '');\n        }\n        return origin.returnEnd ? 0 : lexeme.length;\n      }\n\n      if (isIllegal(lexeme, top))\n        throw new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n\n      /*\n      Parser should not reach this point as all types of lexemes should be caught\n      earlier, but if it does due to some bug make sure it advances at least one\n      character forward to prevent infinite looping.\n      */\n      mode_buffer += lexeme;\n      return lexeme.length || 1;\n    }\n\n    var language = getLanguage(name);\n    if (!language) {\n      throw new Error('Unknown language: \"' + name + '\"');\n    }\n\n    compileLanguage(language);\n    var top = continuation || language;\n    var continuations = {}; // keep continuations for sub-languages\n    var result = '', current;\n    for(current = top; current !== language; current = current.parent) {\n      if (current.className) {\n        result = buildSpan(current.className, '', true) + result;\n      }\n    }\n    var mode_buffer = '';\n    var relevance = 0;\n    try {\n      var match, count, index = 0;\n      while (true) {\n        top.terminators.lastIndex = index;\n        match = top.terminators.exec(value);\n        if (!match)\n          break;\n        count = processLexeme(value.substring(index, match.index), match[0]);\n        index = match.index + count;\n      }\n      processLexeme(value.substr(index));\n      for(current = top; current.parent; current = current.parent) { // close dangling modes\n        if (current.className) {\n          result += spanEndTag;\n        }\n      }\n      return {\n        relevance: relevance,\n        value: result,\n        language: name,\n        top: top\n      };\n    } catch (e) {\n      if (e.message && e.message.indexOf('Illegal') !== -1) {\n        return {\n          relevance: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /*\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n  */\n  function highlightAuto(text, languageSubset) {\n    languageSubset = languageSubset || options.languages || objectKeys(languages);\n    var result = {\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    languageSubset.filter(getLanguage).filter(autoDetection).forEach(function(name) {\n      var current = highlight(name, text, false);\n      current.language = name;\n      if (current.relevance > second_best.relevance) {\n        second_best = current;\n      }\n      if (current.relevance > result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    });\n    if (second_best.language) {\n      result.second_best = second_best;\n    }\n    return result;\n  }\n\n  /*\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n  */\n  function fixMarkup(value) {\n    return !(options.tabReplace || options.useBR)\n      ? value\n      : value.replace(fixMarkupRe, function(match, p1) {\n          if (options.useBR && match === '\\n') {\n            return '<br>';\n          } else if (options.tabReplace) {\n            return p1.replace(/\\t/g, options.tabReplace);\n          }\n          return '';\n      });\n  }\n\n  function buildClassName(prevClassName, currentLang, resultLang) {\n    var language = currentLang ? aliases[currentLang] : resultLang,\n        result   = [prevClassName.trim()];\n\n    if (!prevClassName.match(/\\bhljs\\b/)) {\n      result.push('hljs');\n    }\n\n    if (prevClassName.indexOf(language) === -1) {\n      result.push(language);\n    }\n\n    return result.join(' ').trim();\n  }\n\n  /*\n  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n  two optional parameters for fixMarkup.\n  */\n  function highlightBlock(block) {\n    var node, originalStream, result, resultNode, text;\n    var language = blockLanguage(block);\n\n    if (isNotHighlighted(language))\n        return;\n\n    if (options.useBR) {\n      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      node.innerHTML = block.innerHTML.replace(/\\n/g, '').replace(/<br[ \\/]*>/g, '\\n');\n    } else {\n      node = block;\n    }\n    text = node.textContent;\n    result = language ? highlight(language, text, true) : highlightAuto(text);\n\n    originalStream = nodeStream(node);\n    if (originalStream.length) {\n      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      resultNode.innerHTML = result.value;\n      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n    result.value = fixMarkup(result.value);\n\n    block.innerHTML = result.value;\n    block.className = buildClassName(block.className, language, result.language);\n    block.result = {\n      language: result.language,\n      re: result.relevance\n    };\n    if (result.second_best) {\n      block.second_best = {\n        language: result.second_best.language,\n        re: result.second_best.relevance\n      };\n    }\n  }\n\n  /*\n  Updates highlight.js global options with values passed in the form of an object.\n  */\n  function configure(user_options) {\n    options = inherit(options, user_options);\n  }\n\n  /*\n  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n  */\n  function initHighlighting() {\n    if (initHighlighting.called)\n      return;\n    initHighlighting.called = true;\n\n    var blocks = document.querySelectorAll('pre code');\n    ArrayProto.forEach.call(blocks, highlightBlock);\n  }\n\n  /*\n  Attaches highlighting to the page load event.\n  */\n  function initHighlightingOnLoad() {\n    addEventListener('DOMContentLoaded', initHighlighting, false);\n    addEventListener('load', initHighlighting, false);\n  }\n\n  function registerLanguage(name, language) {\n    var lang = languages[name] = language(hljs);\n    if (lang.aliases) {\n      lang.aliases.forEach(function(alias) {aliases[alias] = name;});\n    }\n  }\n\n  function listLanguages() {\n    return objectKeys(languages);\n  }\n\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  function autoDetection(name) {\n    var lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /* Interface definition */\n\n  hljs.highlight = highlight;\n  hljs.highlightAuto = highlightAuto;\n  hljs.fixMarkup = fixMarkup;\n  hljs.highlightBlock = highlightBlock;\n  hljs.configure = configure;\n  hljs.initHighlighting = initHighlighting;\n  hljs.initHighlightingOnLoad = initHighlightingOnLoad;\n  hljs.registerLanguage = registerLanguage;\n  hljs.listLanguages = listLanguages;\n  hljs.getLanguage = getLanguage;\n  hljs.autoDetection = autoDetection;\n  hljs.inherit = inherit;\n\n  // Common regexps\n  hljs.IDENT_RE = '[a-zA-Z]\\\\w*';\n  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\n  hljs.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  hljs.C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n  hljs.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  hljs.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n  };\n  hljs.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n  };\n  hljs.COMMENT = function (begin, end, inherits) {\n    var mode = hljs.inherit(\n      {\n        className: 'comment',\n        begin: begin, end: end,\n        contains: []\n      },\n      inherits || {}\n    );\n    mode.contains.push(hljs.PHRASAL_WORDS_MODE);\n    mode.contains.push({\n      className: 'doctag',\n      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',\n      relevance: 0\n    });\n    return mode;\n  };\n  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');\n  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\\\*', '\\\\*/');\n  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');\n  hljs.NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE,\n    relevance: 0\n  };\n  hljs.C_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.BINARY_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.BINARY_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.CSS_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE + '(' +\n      '%|em|ex|ch|rem'  +\n      '|vw|vh|vmin|vmax' +\n      '|cm|mm|in|pt|pc|px' +\n      '|deg|grad|rad|turn' +\n      '|s|ms' +\n      '|Hz|kHz' +\n      '|dpi|dpcm|dppx' +\n      ')?',\n    relevance: 0\n  };\n  hljs.REGEXP_MODE = {\n    className: 'regexp',\n    begin: /\\//, end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/, end: /\\]/,\n        relevance: 0,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n  hljs.TITLE_MODE = {\n    className: 'title',\n    begin: hljs.IDENT_RE,\n    relevance: 0\n  };\n  hljs.UNDERSCORE_TITLE_MODE = {\n    className: 'title',\n    begin: hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n  hljs.METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: '\\\\.\\\\s*' + hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n\n  return hljs;\n}));\n"],"sourceRoot":""}